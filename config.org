#+STARTUP: overview
#+TITLE: phantasm-emacs
#+LANGUAGE: en
#+OPTIONS: num:nil
~/.emacs.d/

[[./yukari.png]]
* Introduction
My personal emacs config, based on [[https://github.com/snackon/Witchmacs][Witchmacs]] and [[https://github.com/pprobst/yukimacs][Yukimacs]].
* Quick install
#+BEGIN_SRC 
git clone https://github.com/tsunagatteru/phantasm-emacs ~/.emacs.d
#+END_SRC
* Dependencies
=clang= as backend for C and C++ autocompletion

=llvm= to install irony server

=mit-scheme= for geiser to work

=libvterm= for vterm
* QoL section
Minor quality-of-life modifications for a more pleasant Emacs experience
** Enable line numbers
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
#+END_SRC
** Show parent parentheses
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** Disable the default startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Disable most gui elements
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Enable copypasting outside of Emacs
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t)
#+END_SRC
** Disable automatic creation of backup files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
** Enable conservative scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Disable ring-bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Indentation
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default standard-indent 4)
  (setq c-basic-offset tab-width)
  (setq-default electric-indent-inhibit t)
  (setq-default indent-tabs-mode t)
  (setq backward-delete-char-untabify-method 'nil)
#+END_SRC
** Enable prettify symbols mode
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC
** Enable bracket pair-matching
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              ))
  (electric-pair-mode t)
#+END_SRC
** Creating a new window switches your cursor to it
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Transform yes-or-no questions into y-or-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Defer loading most packages for quicker startup times
#+BEGIN_SRC emacs-lisp
  (setq use-package-always-defer t)
#+END_SRC
** Fill spaces
#+BEGIN_SRC emacs-lisp
                                          ; (setq window-resize-pixelwise t)
  (setq frame-resize-pixelwise t)
#+END_SRC
* =Org= mode
Everything org mode related
#+BEGIN_SRC emacs-lisp
  (use-package org
        :config
        (add-hook 'org-mode-hook 'org-indent-mode)
        (add-hook 'org-mode-hook
                  '(lambda ()
                     (visual-line-mode 1))))

  (setq org-todo-keywords
          '((sequence
             "TODO(t)"
             "WAIT(w)"
             "PROCES(p)"
             "|"
             "DONE(d)"
             "CANCELLED(c)" )))

    (use-package org-indent
        :diminish org-indent-mode)

    (use-package htmlize)

    (use-package evil-org
        :after (evil org)
        :config
        (add-hook 'org-mode-hook 'evil-org-mode)
        (add-hook 'evil-org-mode-hook
                  (lambda ()
                    (evil-org-set-key-theme '(navigation insert textobjects additional calendar))))

    (require 'evil-org-agenda)
      (evil-org-agenda-set-keys))
#+END_SRC
* Eshell
** Prompt
#+BEGIN_SRC emacs-lisp
  (setq eshell-prompt-regexp "^[^αλ\n]*[αλ] ")
  (setq eshell-prompt-function
        (lambda nil
          (concat
           (if (string= (eshell/pwd) (getenv "HOME"))
               (propertize "~" 'face `(:foreground "#99CCFF"))
             (replace-regexp-in-string
              (getenv "HOME")
              (propertize "~" 'face `(:foreground "#99CCFF"))
              (propertize (eshell/pwd) 'face `(:foreground "#99CCFF"))))
           (if (= (user-uid) 0)
               (propertize " α " 'face `(:foreground "#FF6666"))
             (propertize " λ " 'face `(:foreground "#A6E22E"))))))

  (setq eshell-highlight-prompt nil)
#+END_SRC
** Aliases
#+BEGIN_SRC emacs-lisp
  (defalias 'open 'find-file-other-window)
  (defalias 'clean 'eshell/clear-scrollback)
#+END_SRC
** Custom functions
*** Open files as root
#+BEGIN_SRC emacs-lisp
  (defun eshell/sudo-open (filename)
    "Open a file as root in Eshell."
    (let ((qual-filename (if (string-match "^/" filename)
                             filename
                           (concat (expand-file-name (eshell/pwd)) "/" filename))))
      (switch-to-buffer
       (find-file-noselect
        (concat "/sudo::" qual-filename)))))
#+END_SRC
*** Super - Control - RET to open eshell
#+BEGIN_SRC emacs-lisp
  (defun eshell-other-window ()
    "Create or visit an eshell buffer."
    (interactive)
    (if (not (get-buffer "*eshell*"))
        (progn
          (split-window-sensibly (selected-window))
          (other-window 1)
          (eshell))
      (switch-to-buffer-other-window "*eshell*")))

  (global-set-key (kbd "<s-C-return>") 'eshell-other-window)
#+END_SRC
*** Visiting the configuration
#+begin_src emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
*** Reloading the configuration
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtine"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* vterm
A fully-fledged terminal inside Emacs.
#+begin_src emacs-lisp
  (use-package vterm
    :defer t
    :config
    (setq vterm-always-compile-module t)
    (setq vterm-shell "/usr/bin/zsh"))

  (use-package multi-vterm
    :after vterm
    :defer t)
#+end_src
* Use-package section
** =auto-package-update=
Automatically updates and removes old packages
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :defer nil
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC
** =diminish=
Hides minor modes to prevent cluttering your mode line
#+BEGIN_SRC emacs-lisp
  (use-package diminish)
#+END_SRC
** =spaceline=
Spaceline, to use it`s theme
#+BEGIN_SRC emacs-lisp
  (use-package spaceline)
#+END_SRC
** =powerline= 
Thing at the bottom that shows current mode and other stuff
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :init
    (spaceline-spacemacs-theme)
    :hook
    ('after-init-hook) . 'powerline-reset)
#+END_SRC
** =dashboard=
The frontend of Emacs
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :defer nil
    :preface
    (defun update-config ()
      "Update to the latest version."
      (interactive)
      (let ((dir (expand-file-name user-emacs-directory)))
        (if (file-exists-p dir)
            (progn
              (message "Updating!")
              (cd dir)
              (shell-command "git pull")
              (message "Update finished. Switch to the messages buffer to see changes and then restart Emacs"))
          (message "\"%s\" doesn't exist." dir))))

    (defun create-scratch-buffer ()
      "Create a scratch buffer"
      (interactive)
      (switch-to-buffer (get-buffer-create "*scratch*"))
      (lisp-interaction-mode))
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 5)))
    (setq dashboard-center-content t)
    (setq dashboard-banner-logo-title "\t ")
    (setq dashboard-startup-banner "~/.emacs.d/yukari.png")
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-set-init-info t)
    (setq dashboard-init-info (format "%d packages loaded in %s"
                                      (length package-activated-list) (emacs-init-time)))
    (setq dashboard-set-footer nil)
    (setq dashboard-set-navigator t)
    (setq dashboard-navigator-buttons
          `(;; line1
            ((,nil
              "Github"
              "Open github page on your browser"
              (lambda (&rest _) (browse-url "https://github.com/tsunagatteru/phantasm-emacs"))
              'default)
             (nil
              "Update"
              "Get the latest update. Check out the github commits for changes!"
              (lambda (&rest _) (update-config))
              'default)
             )
            ;; line 2
            ((,nil
              "Open scratch buffer"
              "Switch to the scratch buffer"
              (lambda (&rest _) (create-scratch-buffer))
              'default)
             (nil
              "Open config.org"
              "Open configuration file for easy editing"
              (lambda (&rest _) (find-file "~/.emacs.d/config.org"))
              'default)))))
#+END_SRC
** =which-key=
Command completeion
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :init
    (which-key-mode))
#+END_SRC
** =swiper=
Minibuffer for C-s search
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind ("C-s" . 'swiper))
#+END_SRC
** =evil=
Vim keybindings
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :defer nil
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1))
#+END_SRC
** =beacon=
Highlights the cursor position when switching to a new window or buffer
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :diminish beacon-mode
    :init
    (beacon-mode 1))
#+END_SRC
** =switch-window=
C-x o window switching keys
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
** =async=
Utilize asynchronous processes whenever possible
#+BEGIN_SRC emacs-lisp
  (use-package async
    :init
    (dired-async-mode 1))
#+END_SRC
** =page-break-lines=
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :diminish (page-break-lines-mode visual-line-mode))
#+END_SRC
** =undo-tree=
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode)
#+END_SRC
** =treemacs=
Side-bar file and project explorer
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if (executable-find "python3") 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-follow-delay             0.2
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-desc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-width                         30)
      (treemacs-resize-icons 11)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))
#+END_SRC
** =ido= and =ido-vertical=
Better buffer switching and killing
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :init
    (ido-mode 1)
    :config
    (setq ido-enable-flex-matching nil)
    (setq ido-create-new-buffer 'always)
    (setq ido-everywhere t))

  (use-package ido-vertical-mode
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-C-p-up-and-down)
#+END_SRC
** =eldoc=
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode)
#+END_SRC
** =abbrev=
#+BEGIN_SRC emacs-lisp
  (use-package abbrev
    :diminish abbrev-mode)
#+END_SRC
* Programming section
** =company=
Company is the autocompletion frontend that takes all the backends and gives you possible autocompletions when writing programs
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish (meghanada-mode company-mode irony-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort)
    :hook
    ((java-mode c-mode c++-mode) . company-mode))
#+END_SRC
** =yasnippet=
Yasnippet provides useful snippets, nothing to do with Company but still useful when used in conjuction with it
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :hook
    ((c-mode c++-mode) . yas-minor-mode)
    :config
    (yas-reload-all))

  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC
** =magit=
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC
** C & C++
Irony is the company backend for C and C++
#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers
    :defer nil)

  (use-package company-irony
    :defer nil
    :config
    (setq company-backends '((company-c-headers
                              company-dabbrev-code
                              company-irony))))
  (use-package irony
    :defer nil
    :config
    :hook
    ((c++-mode c-mode) . irony-mode)
    ('irony-mode-hook) . 'irony-cdb-autosetup-compile-options)
#+END_SRC

** Scheme
#+BEGIN_SRC emacs-lisp
  (use-package geiser-mit)
#+END_SRC

** Yaml
#+BEGIN_SRC scheme
  (use-package yaml-mode)
#+END_SRC
